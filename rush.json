/**
 * This is the main configuration file for Rush.
 * For full documentation, please see https://rushjs.io
 */
{
  "$schema": "https://developer.microsoft.com/json-schemas/rush/v5/rush.schema.json",
  "rushVersion": "5.71.0",
  //  "yarnVersion": "1.9.4",
  "pnpmVersion": "6.32.18",
  "nodeSupportedVersionRange": ">=12.13.0 <13.0.0 || >=14.15.0 <15.0.0 || >=16.13.0 <17.0.0",

  /**
   * If you would like the version specifiers for your dependencies to be consistent, then
   * uncomment this line. This is effectively similar to running "rush check" before any
   * of the following commands:
   *
   *   rush install, rush update, rush link, rush version, rush publish
   *
   * In some cases you may want this turned on, but need to allow certain packages to use a different
   * version. In those cases, you will need to add an entry to the "allowedAlternativeVersions"
   * section of the common-versions.json.
   */
  // "ensureConsistentVersions": true,
  "projectFolderMinDepth": 2,
  "projectFolderMaxDepth": 2,

  /**
   * Today the npmjs.com registry enforces fairly strict naming rules for packages, but in the early
   * days there was no standard and hardly any enforcement.  A few large legacy projects are still using
   * nonstandard package names, and private registries sometimes allow it.  Set "allowMostlyStandardPackageNames"
   * to true to relax Rush's enforcement of package names.  This allows upper case letters and in the future may
   * relax other rules, however we want to minimize these exceptions.  Many popular tools use certain punctuation
   * characters as delimiters, based on the assumption that they will never appear in a package name; thus if we relax
   * the rules too much it is likely to cause very confusing malfunctions.
   *
   * The default value is false.
   */
  // "allowMostlyStandardPackageNames": true,

  "repository": {
    /**
     * The URL of this Git repository, used by "rush change" to determine the base branch for your PR.
     *
     * The "rush change" command needs to determine which files are affected by your PR diff.
     * If you merged or cherry-picked commits from the main branch into your PR branch, those commits
     * should be excluded from this diff (since they belong to some other PR).  In order to do that,
     * Rush needs to know where to find the base branch for your PR.  This information cannot be
     * determined from Git alone, since the "pull request" feature is not a Git concept.  Ideally
     * Rush would use a vendor-specific protocol to query the information from GitHub, Azure DevOps, etc.
     * But to keep things simple, "rush change" simply assumes that your PR is against the "main" branch
     * of the Git remote indicated by the repository.url setting in rush.json.  If you are working in
     * a GitHub "fork" of the real repo, this setting will be different from the repository URL of your
     * your PR branch, and in this situation "rush change" will also automatically invoke "git fetch"
     * to retrieve the latest activity for the remote main branch.
     */
    // "url": "https://github.com/microsoft/rush-example",
    /**
     * The default branch name. This tells "rush change" which remote branch to compare against.
     * The default value is "main"
     */
    // "defaultBranch": "main",
    /**
     * The default remote. This tells "rush change" which remote to compare against if the remote URL is
     * not set or if a remote matching the provided remote URL is not found.
     */
    // "defaultRemote": "origin"
  },

  /**
   * Event hooks are customized script actions that Rush executes when specific events occur
   */
  "eventHooks": {
    /**
     * The list of shell commands to run before the Rush installation starts
     */
    "preRushInstall": [
      // "common/scripts/pre-rush-install.js"
    ],

    /**
     * The list of shell commands to run after the Rush installation finishes
     */
    "postRushInstall": [],

    /**
     * The list of shell commands to run before the Rush build command starts
     */
    "preRushBuild": [],

    /**
     * The list of shell commands to run after the Rush build command finishes
     */
    "postRushBuild": []
  },

  /**
   * Installation variants allow you to maintain a parallel set of configuration files that can be
   * used to build the entire monorepo with an alternate set of dependencies.  For example, suppose
   * you upgrade all your projects to use a new release of an important framework, but during a transition period
   * you intend to maintain compatibility with the old release.  In this situation, you probably want your
   * CI validation to build the entire repo twice: once with the old release, and once with the new release.
   *
   * Rush "installation variants" correspond to sets of config files located under this folder:
   *
   *   common/config/rush/variants/<variant_name>
   *
   * The variant folder can contain an alternate common-versions.json file.  Its "preferredVersions" field can be used
   * to select older versions of dependencies (within a loose SemVer range specified in your package.json files).
   * To install a variant, run "rush install --variant <variant_name>".
   *
   * For more details and instructions, see this article:  https://rushjs.io/pages/advanced/installation_variants/
   */
  "variants": [
    // {
    //   /**
    //    * The folder name for this variant.
    //    */
    //   "variantName": "old-sdk",
    //
    //   /**
    //    * An informative description
    //    */
    //   "description": "Build this repo using the previous release of the SDK"
    // }
  ],

  /**
   * Rush can collect anonymous telemetry about everyday developer activity such as
   * success/failure of installs, builds, and other operations.  You can use this to identify
   * problems with your toolchain or Rush itself.  THIS TELEMETRY IS NOT SHARED WITH MICROSOFT.
   * It is written into JSON files in the common/temp folder.  It's up to you to write scripts
   * that read these JSON files and do something with them.  These scripts are typically registered
   * in the "eventHooks" section.
   */
  // "telemetryEnabled": false,

  /**
   * Allows creation of hotfix changes. This feature is experimental so it is disabled by default.
   * If this is set, 'rush change' only allows a 'hotfix' change type to be specified. This change type
   * will be used when publishing subsequent changes from the monorepo.
   */
  // "hotfixChangeEnabled": false,

  /**
   * This is an optional, but recommended, list of available tags that can be applied
   * to projects. If this property is not specified, any tag is allowed. This
   * list is useful in preventing typos when specifying tags for projects.
   */
  // "allowedProjectTags": [ "apps", "Web", "tools" ],

  /**
   * (Required) This is the inventory of projects to be managed by Rush.
   *
   * Rush does not automatically scan for projects using wildcards, for a few reasons:
   * 1. Depth-first scans are expensive, particularly when tools need to repeatedly collect the list.
   * 2. On a caching CI machine, scans can accidentally pick up files left behind from a previous build.
   * 3. It's useful to have a centralized inventory of all projects and their important metadata.
   */
  "projects": [
    {
      "packageName": "@local/app1",
      "projectFolder": "apps/app1",
      "reviewCategory": "production",

      /**
       * A list of local projects that appear as devDependencies for this project, but cannot be
       * locally linked because it would create a cyclic dependency; instead, the last published
       * version will be installed in the Common folder.
       */
      "cyclicDependencyProjects": [
        // "my-toolchain"
      ]

      /**
       * If true, then this project will be ignored by the "rush check" command.
       * The default value is false.
       */
      // "skipRushCheck": false,

      /**
       * A flag indicating that changes to this project will be published to npm, which affects
       * the Rush change and publish workflows. The default value is false.
       * NOTE: "versionPolicyName" and "shouldPublish" are alternatives; you cannot specify them both.
       */
      // "shouldPublish": false,

      /**
       * Facilitates postprocessing of a project's files prior to publishing.
       *
       * If specified, the "publishFolder" is the relative path to a subfolder of the project folder.
       * The "rush publish" command will publish the subfolder instead of the project folder.  The subfolder
       * must contain its own package.json file, which is typically a build output.
       */
      // "publishFolder": "temp/publish",

      /**
       * An optional version policy associated with the project.  Version policies are defined
       * in "version-policies.json" file.  See the "rush publish" documentation for more info.
       * NOTE: "versionPolicyName" and "shouldPublish" are alternatives; you cannot specify them both.
       */
      // "versionPolicyName": "",

      /**
       * An optional set of custom tags that can be used to select this project. For example,
       * adding "my-custom-tag" will allow this project to be selected by the
       * command "rush list --only tag:my-custom-tag"
       */
      // "tags": ["apps", "web"]
    },

    //     {
    //       "packageName": "my-controls",
    //       "projectFolder": "libraries/my-controls",
    //       "reviewCategory": "production",
    //       "tags": ["libraries", "web"]
    //     },
    //
    //     {
    //       "packageName": "my-toolchain",
    //       "projectFolder": "tools/my-toolchain",
    //       "reviewCategory": "tools",
    //       "tags": ["tools"]
    //     }
    {
      "packageName": "@local/storybook",
      "projectFolder": "apps/storybook",
      "reviewCategory": "apps"
    },
    {
      "packageName": "@local/library1",
      "projectFolder": "libraries/library1",
      "reviewCategory": "libraries"
    }
  ]
}
